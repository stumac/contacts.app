// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package data

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    first_name, phone, email
) VALUES (
    ?, ?, ?
) RETURNING id, first_name, phone, email
`

type CreateContactParams struct {
	FirstName string
	Phone     sql.NullString
	Email     sql.NullString
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact, arg.FirstName, arg.Phone, arg.Email)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Phone,
		&i.Email,
	)
	return i, err
}

const getContact = `-- name: GetContact :one
SELECT id, first_name, phone, email FROM contacts WHERE id = ?
`

func (q *Queries) GetContact(ctx context.Context, id int64) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Phone,
		&i.Email,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, first_name, phone, email FROM contacts ORDER BY first_name
`

func (q *Queries) ListContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.Phone,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
set first_name = ?, phone = ?, email = ? WHERE id = ? RETURNING id, first_name, phone, email
`

type UpdateContactParams struct {
	FirstName string
	Phone     sql.NullString
	Email     sql.NullString
	ID        int64
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.FirstName,
		arg.Phone,
		arg.Email,
		arg.ID,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Phone,
		&i.Email,
	)
	return i, err
}
